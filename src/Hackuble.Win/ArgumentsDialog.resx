<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAA
        AFgAAADQAAAA0QAAAFkAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAA
        ADkAAACmAAAA8wAAAP8AAAD/AAAA8wAAAKcAAAA6AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        ACkAAACRAAAA6wAAAP8AAADoAAAA+AAAAPgAAADoAAAA/wAAAOsAAACSAAAAKQAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABsAAAB6AAAA3wAAAP8AAADrAAAAjwAAAEYAAADiAAAA4gAAAEYAAACOAAAA6gAAAP8AAADgAAAAewAA
        ABsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABAAAABkAAAA0AAAAP4AAAD0AAAApwAAADkAAAABAAAAHgAAAOEAAADhAAAAHgAAAAEAAAA4AAAApgAA
        APQAAAD+AAAA0AAAAGUAAAARAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAkAAABOAAAAvgAAAPoAAAD6AAAAuwAAAEwAAAAIAAAAAAAAAAAAAAAeAAAA4QAAAOEAAAAeAAAAAAAA
        AAAAAAAIAAAASwAAALoAAAD6AAAA+wAAAL8AAABPAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAAA7AAAAqQAAAPUAAAD+AAAAzgAAAGEAAAAPAAAAAAAAAAAAAAAAAAAAAAAAABQAAADJAAAAygAA
        ABQAAAAAAAAAAAAAAAAAAAAAAAAADwAAAGEAAADNAAAA/gAAAPUAAACqAAAAPAAAAAQAAAAAAAAAAAAA
        AAAAAAARAAAAjQAAAOwAAAD/AAAA3QAAAHgAAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        ACoAAAApAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkAAAB3AAAA3QAAAP8AAADsAAAAjgAA
        ABEAAAAAAAAAAAAAAEEAAAD2AAAA8QAAAJAAAAAnAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAYAAAACAAAAAAAAAAEAAAAmAAAAjwAA
        APEAAAD2AAAAQQAAAAAAAAAAAAAARgAAAPwAAAC8AAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAAAAAAPAAAASwAAAIsAAACvAAAAtgAAAKMAAABwAAAAKwAA
        AAIAAAAJAAAAuwAAAPwAAABGAAAAAAAAAAAAAABGAAAA/AAAALcAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAANQAAAJwAAAC1AAAAjgAAALgAAAD4AAAA/wAAAP0AAAD8AAAA/wAA
        AP8AAADlAAAAgQAAABoAAAC2AAAA/AAAAEYAAAAAAAAAAAAAAEYAAAD8AAAAtwAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAA+gAAAP8AAAD/AAAA/gAAANEAAAB+AAAATQAA
        AEUAAABfAAAAowAAAO4AAAD+AAAAsQAAAMwAAAD7AAAARgAAAAAAAAAAAAAARgAAAPwAAAC3AAAABgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAJgAAADJAAAA7AAAAP8AAAD5AAAAUAAA
        AAAAAAAAAAAAAAAAAAAAAAAEAAAARgAAANEAAAD/AAAA/QAAAPgAAABGAAAAAAAAAAAAAABGAAAA/AAA
        ALcAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByAAAAqAAAABkAAABvAAAA+wAA
        APoAAABLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAN8AAAD/AAAA+AAAAEYAAAAAAAAAAAAA
        AEYAAAD8AAAAtwAAAAYAAAAAAAAAAAAAAAEAAAAMAAAAAQAAAAAAAAAAAAAAAAAAACAAAAATAAAAEwAA
        AJ4AAADHAAAAwQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdgAAAP8AAAD4AAAARgAA
        AAAAAAAAAAAARgAAAPwAAAC3AAAABgAAAAAAAAAAAAAAGAAAAKkAAABnAAAADwAAAAAAAAAAAAAAAAAA
        AAAAAABwAAAAnwAAABkAAAAbAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAA5wAA
        APoAAABGAAAAAAAAAAAAAABGAAAA/AAAALcAAAAGAAAAAAAAAAAAAAA3AAAA8gAAAPoAAAC5AAAARgAA
        AAYAAAAAAAAAAAAAABgAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AA8AAADLAAAA+wAAAEYAAAAAAAAAAAAAAEYAAAD8AAAAtwAAAAYAAAAAAAAAAAAAADEAAADtAAAA/wAA
        AP8AAADwAAAAmgAAACwAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABwAAALoAAAD8AAAARgAAAAAAAAAAAAAARgAAAPwAAAC3AAAABgAAAAAAAAAAAAAACwAA
        AK0AAAD/AAAA/wAAAP8AAAD/AAAA4gAAAG0AAAADAAAAAAAAAAAAAAAAAAAAEQAAAC0AAAAIAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAGAAAAtwAAAPwAAABGAAAAAAAAAAAAAABGAAAA/AAAALcAAAAGAAAAAAAA
        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
        /gHAH/gD8AfgD/wBgD//AAD//8AD///wD/8=
</value>
  </data>
</root>