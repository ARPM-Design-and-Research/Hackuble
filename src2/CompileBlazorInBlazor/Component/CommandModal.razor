@inject CompileService service

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body overflow-auto" style="height: 500px">
                @*<p>Modal body text goes here.</p>*@
                <div class="form-group">
                    <label for="exampleFormControlTextarea1">C# Code</label>
                    <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" @bind="@CsCode"></textarea>
                </div>
                <button type="button" class="btn btn-primary" @onclick="Run">Run</button>
                <div class="card">
                    <div class="card-body p-0">
                        <pre class="overflow-auto" style="height:50px">@ResultText</pre>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {


    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    string CsCode { get; set; }
    string ResultText { get; set; }
    string CompileText { get; set; }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async Task Run()
    {
        try
        {
            service.CompileLog = new List<string>();
            ResultText = await service.CompileAndRun(CsCode);
        }
        catch (Exception e)
        {
            service.CompileLog.Add(e.Message);
            service.CompileLog.Add(e.StackTrace);
            throw;
        }
        finally
        {
            CompileText = string.Join("\r\n", service.CompileLog);
            this.StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        CsCode = @"
            using System.Text;

            namespace CompileBlazorInBlazor.Demo
            {
                public class RunClass
                {
                    public string Run(string name, int count)
                    {
                        var sb = new StringBuilder();
                        for (int i = 0; i < count; i++)
                        {
                            sb.AppendLine($""{i}) Hello, {name}!"");
                        }

                        return sb.ToString();
                    }
                }
            }
            ";
    }
}