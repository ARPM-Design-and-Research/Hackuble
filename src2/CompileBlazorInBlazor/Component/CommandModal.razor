@inject CompileService service

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body overflow-auto" style="height: 500px">
                @*<p>Modal body text goes here.</p>*@
                <div class="form-group">
                    <label for="exampleFormControlTextarea1">C# Code</label>
                    <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" @bind="@CsCode"></textarea>
                </div>
                <button type="button" class="btn btn-primary" @onclick="Run">Run</button><br />
                <label for="command">Command</label>
                <input type="text" class="form-text" id="command" @bind="@InvokeCommand" />
                <label for="arguments">Arguments JSON</label>
                <input type="text" class="form-text" id="arguments" @bind="@ArgumentsJSON" />
                <div class="card">
                    <div class="card-body p-0">
                        <pre class="overflow-auto" style="height:50px">@ResultText</pre>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {


    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    string CsCode { get; set; }
    string ResultText { get; set; }
    string CompileText { get; set; }
    Type CompiledType { get; set; }
    string InvokeCommand { get; set; }
    string ArgumentsJSON { get; set; }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async Task Run()
    {
        try
        {
            service.CompileLog = new List<string>();
            CompiledType = await service.CompileOnly(CsCode);
            ArgumentsObject argumentsObj;
            if (!string.IsNullOrEmpty(ArgumentsJSON))
            {
                argumentsObj = Newtonsoft.Json.JsonConvert.DeserializeObject<ArgumentsObject>(ArgumentsJSON);
                ResultText = (string)service.RunCompiled(CompiledType, InvokeCommand, argumentsObj);
            }
            else
            {
                ResultText = (string)service.RunCompiled(CompiledType, InvokeCommand);
            }
        }
        catch (Exception e)
        {
            service.CompileLog.Add(e.Message);
            service.CompileLog.Add(e.StackTrace);
            throw;
        }
        finally
        {
            CompileText = string.Join("\r\n", service.CompileLog);
            this.StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        CsCode = @"
        using System.Text;

        namespace CompileBlazorInBlazor.Demo
        {
            public class RunClass
            {
                public string Run()
                {
                    var sb = new StringBuilder();
                    for (int i = 0; i < 5; i++)
                    {
                        sb.AppendLine($""{i}) Hello, A!"");
                    }

                    return sb.ToString();
                }
                public string RunB()
                {
                    var sb = new StringBuilder();
                    for (int i = 15; i < 20; i++)
                    {
                        sb.AppendLine($""{i}) Hello, B!"");
                    }

                    return sb.ToString();
                }
            }
        }
        ";
    }
}