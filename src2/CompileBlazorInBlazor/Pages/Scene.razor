@page "/"
@inject IJSRuntime JSRuntime;
@inject Context CurrentContext;

<input type="file"
        id="avatar" name="avatar"
        accept="image/png, image/jpeg">
<InputFile OnChange="HandleSelection" />
<canvas></canvas>

<button class="add-cube-btn" @onclick="MyButtonClick" style="position:absolute; right: 10px; top: 10px;">Clear</button>

@code {
    string fileStatus;

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new System.IO.MemoryStream();
            await file.Data.CopyToAsync(ms);

            fileStatus = $"Finished loading {file.Size} bytes from {file.Name}";
        }
    }

    private static System.Timers.Timer aTimer;
    private string status = "healthy";

    protected async override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        // pass reference for JSInvokables
        await JSRuntime.InvokeAsync<object>
    ("createScene", new object[] { DotNetObjectReference.Create(this) });
        //await JSRuntime.InvokeAsync<object>
        //    ("createCube", new object[] { });
        await JSRuntime.InvokeAsync<object>
            ("animate", new object[] { });

        // from time to time change color of cube...
        // Create a timer with a two second interval.
        //aTimer = new System.Timers.Timer(2000);
        // Hook up the Elapsed event for the timer.
        //aTimer.Elapsed += OnTimedEvent;
        //aTimer.AutoReset = true;
        //aTimer.Enabled = true;

        CommandService.JSRuntime = JSRuntime;

    }

    //private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    //{
    //    switch (status)
    //    {
    //        case "healthy":
    //            await JSRuntime.InvokeAsync<object>
    //                ("unhealthy", new object[] { });
    //            status = "unhealthy";
    //            break;
    //        case "unhealthy":
    //            await JSRuntime.InvokeAsync<object>
    //                ("healthy", new object[] { });
    //            status = "healthy";
    //            break;
    //    }


    //}

    [JSInvokable]
    public async void OnClickCube()
    {
        await JSRuntime.InvokeAsync<object>
            ("clickCube", new object[] { });
    }

    public async void MyButtonClick()
    {
        await JSRuntime.InvokeAsync<object>
            ("clearScene", new object[] { });
        CurrentContext = new Context();
    }

}
