@inject CompileService service

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">CompileBlazorInBlazor</a>
    <button class="navbar-toggler" @onclick=@ToggleNavMenu>
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class=@(collapseNavMenu ? "collapse" : null) @onclick=@ToggleNavMenu>
    @*<ul class="nav flex-column">
        <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match=NavLinkMatch.All>
                    <span class="oi oi-home" aria-hidden="true"></span> Compile C#
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="blazor">
                    <span class="oi oi-plus" aria-hidden="true"></span> Compile Blazor
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="">
                    <span class="oi oi-globe" aria-hidden="true"></span> Scene
                </NavLink>
            </li>
        </ul>*@

    <div class="mt-5" style="height:60vh">
        <div class="px-3" id="commandContainer">
            @*<button class="btn btn-primary mx-auto" type="submit" @onclick=@launchCommandEditor>Button</button>*@
            <!-- Button trigger modal -->
            @*<button class="btn btn-primary mx-auto" @onclick="launchCommandEditor">New Command</button>*@
            <span class="badge badge-primary">Primary</span>
            <span class="badge badge-secondary">Secondary</span>
            <span class="badge badge-success">Success</span>
            <span class="badge badge-danger">Danger</span>
            <span class="badge badge-warning">Warning</span>
            <span class="badge badge-info">Info</span>
            <span class="badge badge-light">Light</span>
            <span class="badge badge-dark">Dark</span>
        </div>
    </div>

    

    <div class="d-flex mt-5">
        @*<button class="btn btn-primary mx-auto" type="submit" @onclick=@launchCommandEditor>Button</button>*@
        <!-- Button trigger modal -->
        <button class="btn btn-primary mx-auto" @onclick="launchCommandEditor">New Command</button>

    </div>




    @*<CompileBlazorInBlazor.Component.CommandModal @ref="Modal"></CompileBlazorInBlazor.Component.CommandModal>*@




    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body overflow-auto" style="height: 500px">
                    @*<p>Modal body text goes here.</p>*@
                    <div class="form-group">
                        <label for="exampleFormControlTextarea1">C# Code</label>
                        <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" @bind="@CsCode"></textarea>
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="Compile">Compile</button><br />
                    <button type="button" class="btn btn-primary" @onclick="Run">Run</button><br />
                    <label for="command">Command</label>
                    <textarea class="form-control" id="command" rows="5" @bind="@CommandJSON"></textarea>
                    <div class="card">
                        <div class="card-body p-0">
                            <pre class="overflow-auto" style="height:50px">@ResultText</pre>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                </div>
            </div>
        </div>
    </div>

    @*if (ShowBackdrop)
        {
            <div class="modal-backdrop fade show"></div>
        }*@

</div>




@functions {
    private CompileBlazorInBlazor.Component.CommandModal Modal { get; set; }

    bool collapseNavMenu = true;



    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    string CsCode { get; set; }
    string ResultText { get; set; }
    string CompileText { get; set; }
    Type CompiledType { get; set; }
    string CommandJSON { get; set; }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    public void launchCommandEditor()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }


    public async Task Compile()
    {
        try
        {
            service.CompileLog = new List<string>();
            CompiledType = await service.CompileOnly(CsCode);
        }
        catch (Exception e)
        {
            service.CompileLog.Add(e.Message);
            service.CompileLog.Add(e.StackTrace);
            throw;
        }
        finally
        {
            CompileText = string.Join("\r\n", service.CompileLog);
            this.StateHasChanged();
        }
    }

    public void Run()
    {
        if (CompiledType == null) return;
        try
        {
            CommandObject commandObject;
            if (!string.IsNullOrEmpty(CommandJSON))
            {
                commandObject = Newtonsoft.Json.JsonConvert.DeserializeObject<CommandObject>(CommandJSON);
                ResultText = (string)service.RunCompiled(CompiledType, commandObject);
            }
            else
            {
                throw new Exception("No Command");
            }
        }
        catch (Exception e)
        {
            service.CompileLog.Add(e.Message);
            service.CompileLog.Add(e.StackTrace);
            throw;
        }
        finally
        {
            CompileText = string.Join("\r\n", service.CompileLog);
            this.StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        CsCode = @"
        using System.Text;

        namespace CompileBlazorInBlazor.Demo
        {
            public class RunClass
            {
                public string Run(string name)
                {
                    var sb = new StringBuilder();
                    for (int i = 0; i < 5; i++)
                    {
                        sb.AppendLine($""{i}) Hello, {name}!"");
                    }

                    return sb.ToString();
                }
                public string RunB(bool toggle)
                {
                    return (!toggle).ToString();
                }
            }
        }
        ";
        CommandJSON = @"
        {""command"":"""",
        ""data"":[
        
        ]}
        ";
    }
}
